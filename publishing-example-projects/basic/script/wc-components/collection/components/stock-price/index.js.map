{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/stock-price/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Listen, Prop, State, Watch, h } from \"@stencil/core\";\r\nimport { AV_API_KEY } from '../../global/global';\r\n\r\n@Component({\r\n    tag: 'wc-stock-price',\r\n    styleUrl: './index.css',\r\n    shadow: true,\r\n})\r\nexport class StockPrice {\r\n    // Es mas facil inicializar variables y estas seran las referencia al componente ref={ el => this.myAttr = el}\r\n    stockInput: HTMLInputElement;\r\n    // initialStockSymbol: string;\r\n\r\n    // Decorador para acceder al elemento adyacente lo equivalente a :host() {} en CSS, considerando si tiene el shadow activo\r\n    @Element() el:  HTMLElement\r\n\r\n    @State() fetchedPrice: number;\r\n    @State() stockUserInput: string;\r\n    @State() stockInputValid:boolean = false;\r\n    @State() error: string;\r\n    @State() loading: boolean = false;\r\n\r\n    // los props en notacion cammelCase deben ser atributos con nombres separados por guin medio en el componente\r\n    // Ejemplo \"stock-symbol\"\r\n    @Prop({ mutable:true, reflect: true }) stockSymbol: string;\r\n\r\n    // establece un observador para este Prop::stockSymbol para ejecutar el metodo cuando cambia la misma\r\n    // Este pasa al metodo el valor nuevo y anterior del mismo tipo definido \r\n    @Watch('stockSymbol')\r\n    stockSymbolChanged(newValue: string, oldValue: string) {\r\n        if (newValue != oldValue) {\r\n            this.stockUserInput = newValue;\r\n            this.stockInputValid = true;\r\n            this.fetchStockPrice(newValue);\r\n        }\r\n    }\r\n\r\n    onUserInput(e: Event) {\r\n        this.stockUserInput = (e.target as HTMLInputElement).value;\r\n        this.stockInputValid = this.stockUserInput.trim() !== '';\r\n    }\r\n\r\n    onFecthStockPrice(e: Event) {\r\n        e.preventDefault();\r\n\r\n        // Forma INCORRECTA de acceder al valor, por que TS detecta que no todos los elementos HTMl pueden tener este atributo\r\n        // Y tambien por que al estar activo el shodow dom debemos acceder al atributo mediante el shadowRoot\r\n        //this.el.querySelector('#stock-symbol').value;\r\n        // FORMA CORRECTA, es decir que tipo de elemento es\r\n        // const stockSymbol = (this.el.shadowRoot.querySelector('#stock-symbol') as HTMLInputElement).value\r\n\r\n        this.stockSymbol = this.stockInput.value;\r\n        // this.fetchStockPrice(stockSymbol); // Ya no es necesario por que al actualizar el valor se ejecuta el codigo del metodo stockSymbolChanged\r\n    }\r\n\r\n    // metodo ciclo de vida de componente stencil: Cuando el componente esta por cargarse\r\n    componentWillLoad() {\r\n        console.log('componentWillLoad', this.stockSymbol);\r\n        this.fetchedPrice = 0;\r\n\r\n    }\r\n\r\n    // metodo ciclo de vida de componente stencil: cuando este se carga en el DOM\r\n    componentDidLoad() {\r\n        console.log('componentDidLoad');\r\n        if (this.stockSymbol) {\r\n            // this.initialStockSymbol = this.stockSymbol;\r\n            this.stockUserInput = this.stockSymbol;\r\n            this.stockInputValid = true;\r\n            this.fetchStockPrice(this.stockSymbol);\r\n        }\r\n    }\r\n\r\n    // metodo ciclo de vida de componente stencil: se activa antes de procesar una actualizacion del componente \r\n    componentWillUpdate() {\r\n        console.log('componentWillUpdate');\r\n    }\r\n\r\n    // metodo ciclo de vida de componente stencil: se activa cuando se actualiza el componente\r\n    componentDidUpdate() {\r\n        console.log('componentDidUpdate');\r\n        // if(this.stockSymbol !== this.initialStockSymbol) {\r\n        //     this.initialStockSymbol = this.stockSymbol;\r\n        //     this.fetchStockPrice(this.stockSymbol);\r\n        // }\r\n    }\r\n\r\n    // metodo ciclo de vida de componente stencil: cuando el componente es removido del DOM\r\n    // antes llamado => componentDidUnload()\r\n    disconnectedCallback() {\r\n        console.log('disconnectedCallback');\r\n    }\r\n\r\n    // Decorador para escuchar cualquier evento, recive como argumento el nombre del evento a captar para ejecutar el metodo\r\n    // @Listen('wcSymbolSelected') // => de esta manera escucha eventos dentro del componente que esta en el shadow DOm\r\n    @Listen('wcSymbolSelected', {target: 'body'}) // => esta forma se especifica a que nivel debe de escuchar loe eventos\r\n    onStockSymbolSelected(e: CustomEvent) {\r\n        // console.log('onStockSymbolSelected::wcSymbolSelected')\r\n        if (e.detail && e.detail !== this.stockSymbol) {\r\n            // stockSymbol tienen un watcher para ejecutar un metodo al modificar este valor de esta propiedad\r\n            this.stockSymbol = e.detail;\r\n        }\r\n    }\r\n\r\n    fetchStockPrice(stockSymbol: string) {\r\n        this.loading = true;\r\n        fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${AV_API_KEY}`)\r\n        .then(res => {\r\n            if (res.status !== 200) throw new Error('Invalid!');\r\n            return res.json();\r\n        })\r\n        .then( res => {\r\n            if (!res['Global Quote']['05. price']) throw new Error('Invalid Symbol!!');\r\n            this.error = '';\r\n            this.fetchedPrice = +res['Global Quote']['05. price']; // se castea a number\r\n            this.loading = false;\r\n        })\r\n        .catch(err => {\r\n            // console.log(err)\r\n            this.error = err.message;\r\n            this.fetchedPrice = null;\r\n            this.loading = false;\r\n        })\r\n        ;\r\n    }\r\n\r\n    // Metodo stencil que ayuda a manimular atributos del componente mismo, retornand un objeto de los mismos!\r\n    hostData() {\r\n        // REVISAR por que no se esta retornando por si solo la clase: hydrated del componente\r\n        return { class: this.error ? 'error hydrated': 'hydrated'};\r\n    }\r\n\r\n    render() {\r\n        let dataContent = <p>Please enter a symbol</p>;\r\n        if (this.error) dataContent = <p>{this.error}</p>;\r\n        if (this.fetchedPrice) dataContent = <p>Price: ${this.fetchedPrice}</p>;\r\n        if (this.loading) dataContent = <wc-spinner></wc-spinner>;\r\n\r\n        return [\r\n            <form onSubmit={this.onFecthStockPrice.bind(this)}>\r\n                <input id=\"stock-symbol\" type=\"text\" \r\n                    ref={el => this.stockInput = el} \r\n                    value={this.stockUserInput}\r\n                    onInput={this.onUserInput.bind(this)} // note: https://www.w3schools.com/tags/ev_oninput.asp\r\n                />\r\n                <button type=\"submit\" disabled={!this.stockInputValid || this.loading}>Fetch</button>\r\n            </form>,\r\n            <div>\r\n                {dataContent}\r\n            </div>\r\n        ];\r\n    }\r\n}"]}